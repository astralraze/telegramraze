# version 1.1-0
from aiogram import Bot, Dispatcher, Router, types, F, html
from aiogram.types import Message, CallbackQuery, InputFile, FSInputFile
from aiogram.methods.send_voice import SendVoice
from aiogram.filters import Filter, Command
import random
from aiogram import Bot, Dispatcher, types, F
from handlers import database as db
import datetime
import asyncio



HELP_TEXT = """
–£–º–æ–≤–∏ –≥—Ä–∏ 'üåµ DICK DICK DICK üåµ'.
–í–∏ –º–æ–∂–µ—Ç–µ –∑–±—ñ–ª—å—à–∏—Ç–∏ –∞–±–æ –∑–º–µ–Ω—à–∏—Ç–∏ —Å–≤—ñ–π —Ä–æ–∑–º—ñ—Ä –ø—ñ—Å—é–Ω–∞ –≤—ñ–¥ -5 –¥–æ +10 —Å–º –≤ –¥–µ–Ω—å.
üëë –ó–º–∞–≥–∞–π—Ç–µ—Å—å –∑ –≥—Ä–∞–≤—Ü—è–º–∏ –∑–∞ –Ω–∞–π–±—ñ–ª—å—à–∏–π –ø—ñ—Å—é–Ω —á–∞—Ç—É 
üé≤ /dick - –í–∏–ø—Ä–æ–±—É–≤–∞—Ç–∏ —É–¥–∞—á—É. 
üåµ /size - –î—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–≤—ñ–π —Ä–æ–∑–º—ñ—Ä –ø—ñ—Å—é–Ω–∞. 
üëë /leaders - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤.
"""


router = Router()

@router.message(Command('dickinfo'))
async def cmd_start_and_help(message: types.Message):
    check_user = await db.select_username(message)
    if not check_user:
        await message.reply("üòø –ö–æ—Ç–∏–∫, —Ç–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /reg")
    else:
        await message.reply(HELP_TEXT)

@router.message(Command('dick'))
async def cmd_up(message: types.Message):
    ATTEMPTS = 2
    check_user = await db.select_username(message)
    if not check_user:
        await message.reply("üòø –ö–æ—Ç–∏–∫, —Ç–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /reg")
    else:
    #setcurrentdata in date
        now = datetime.datetime.now()
        #setdatafromdb in datauser
        dateuser = await db.select_date(message)
        if dateuser:
            last_used_time = datetime.datetime.strptime(dateuser[0], '%Y-%m-%d %H:%M:%S.%f')
            difference = now - last_used_time
            if difference < datetime.timedelta(hours=12):
                hours_left = (12 * 60 - difference.seconds // 60) // 60
                minutes_left = (12 * 60 - difference.seconds // 60) % 60
                if hours_left < 5 and hours_left != 1 and hours_left != 0:
                    await message.reply(f'üòê –ü–æ—á–µ–∫–∞–π —â–µ {hours_left} –≥–æ–¥–∏–Ω–∏ {minutes_left} —Ö–≤–∏–ª–∏–Ω.')
                elif hours_left == 1:
                    await message.reply(f'üòê –ü–æ—á–µ–∫–∞–π —â–µ {hours_left} –≥–æ–¥–∏–Ω—É {minutes_left} —Ö–≤–∏–ª–∏–Ω.')
                elif hours_left == 0:
                    await message.reply(f'üòê –ü–æ—á–µ–∫–∞–π —â–µ {minutes_left} —Ö–≤–∏–ª–∏–Ω.')
                else:
                    await message.reply(f'üòê –ü–æ—á–µ–∫–∞–π —â–µ {hours_left} –≥–æ–¥–∏–Ω {minutes_left} —Ö–≤–∏–ª–∏–Ω.')
            else:
                #getsizefromdb in usersize
                usersize = await db.select_size(message)
                for user in usersize:
                    math = random.randint(-10,10)
                    newsize = user + math
                    await db.update_size(newsize, message.from_user.id)
                    await db.update_date(now, message.from_user.id)
                    if math > 0:
                        await message.reply(f'>>> üòª –ß–ª–µ–Ω –∑–±—ñ–ª—å—à–∏–≤—Å—è –Ω–∞: {math} —Å–º. –¢–≤—ñ–π —Ç–µ–ø–µ—Ä—ñ—à–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä: {newsize} —Å–º')
                    elif math == 0:
                        await message.reply(f'>>> üòê –ß–ª–µ–Ω –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è. –¢–≤—ñ–π —Ä–æ–∑–º—ñ—Ä: {newsize} —Å–º')
                    elif math < 0:
                        await message.reply(f'>>> ü§è –ß–ª–µ–Ω –∑–º–µ–Ω—à–∏–≤—Å—è –Ω–∞: {math} —Å–º. –¢–≤—ñ–π —Ç–µ–ø–µ—Ä—ñ—à–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä: {newsize} —Å–º')

@router.message(Command('size'))
async def cmd_size(message: types.Message):
    check_user = await db.select_username(message)
    if not check_user:
        await message.reply("üòø –ö–æ—Ç–∏–∫, —Ç–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /reg")
    else:
        size = await db.select_size(message)
        for rowed in size:
            await message.reply(f"‚ñ™Ô∏é –¢–≤—ñ–π —Ä–æ–∑–º—ñ—Ä —á–ª–µ–Ω—É: {rowed} —Å–º")
            voice = FSInputFile("voice/voice_07-10-2023_03-03-21.ogg")
            await message.answer_voice(voice)

@router.message(Command('leaders'))
async def cmd_getleaders(message: types.Message):
    check_user = await db.select_username(message)
    if not check_user:
        await message.reply("üòø –ö–æ—Ç–∏–∫, —Ç–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /reg")
    else:
        chat_id_session = message.chat.id
        chatid_db = await db.select_chat_id(message)
        for row in chatid_db:
            if chat_id_session != row:
                newchatid = chat_id_session
                await db.update_chat_id(newchatid, message.from_user.id)
                allmembers = await db.select_members(message)
                sorted_list = sorted(allmembers, key=lambda x: x[1], reverse=True)
                formatted_messages = []
                pers = 1
                leader_stik = 'ü•á'
                for name, value in sorted_list:
                    if pers == 1:
                        leader_stik = leader_stik
                    elif pers == 2:
                        leader_stik = 'ü•à'
                    elif pers == 3:
                        leader_stik = 'ü•â'
                    elif pers > 3:
                        leader_stik = 'üë§'
                    formatted_messages.append(f'{leader_stik} ‚ñ™Ô∏é {value} —Å–º ‚ñ™Ô∏é {name}')
                    pers += 1

                text = '\n'.join(formatted_messages)
                await message.reply(f'üëë –°–ø–∏—Å–æ–∫ –ª—ñ–¥–µ—Ä—ñ–≤ üëë\n\n{text}')
            elif chat_id_session == row:
                allmembers = await db.select_members(message)
                sorted_list = sorted(allmembers, key=lambda x: x[1], reverse=True)
                formatted_messages = []
                pers = 1
                leader_stik = 'ü•á'
                for name, value in sorted_list:
                    if pers == 1:
                        leader_stik = leader_stik
                    elif pers == 2:
                        leader_stik = 'ü•à'
                    elif pers == 3:
                        leader_stik = 'ü•â'
                    elif pers > 3:
                        leader_stik = 'üë§'
                    formatted_messages.append(f'{leader_stik} ‚ñ™Ô∏é {value} —Å–º ‚ñ™Ô∏é {name}')
                    pers += 1


                text = '\n'.join(formatted_messages)
                await message.reply(f'üëë –°–ø–∏—Å–æ–∫ –ª—ñ–¥–µ—Ä—ñ–≤ üëë\n\n{text}')
        db.db.commit()


@router.message(Command('rade'))
async def send_box(message: types.Message):
    check_user = await db.select_username(message)
    if not check_user:
        await message.reply("üòø –ö–æ—Ç–∏–∫, —Ç–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /reg")
    else:
        numberID_event = 1
        eventName = await db.select_eventName(numberID_event)
        descriptionName = await db.select_eventDescription(numberID_event)
        rand_time = random.randint(10, 50)

        now = datetime.datetime.now()
        dateevent = await db.select_dateEvent(numberID_event)
        if dateevent:
            last_date_time = datetime.datetime.strptime(dateevent[0], '%Y-%m-%d %H:%M:%S.%f')
            difference = now - last_date_time
            if difference < datetime.timedelta(hours=3):
                hours_left = (3 * 60 - difference.seconds // 60) // 60
                minutes_left = (3 * 60 - difference.seconds // 60) % 60
                if hours_left < 5 and hours_left != 1 and hours_left != 0:
                    await message.reply(f'üòê –Ü–≤–µ–Ω—Ç –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ {hours_left} –≥–æ–¥–∏–Ω–∏ {minutes_left} —Ö–≤–∏–ª–∏–Ω.')
                elif hours_left == 1:
                    await message.reply(f'üòê –Ü–≤–µ–Ω—Ç –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑{hours_left} –≥–æ–¥–∏–Ω—É {minutes_left} —Ö–≤–∏–ª–∏–Ω.')
                elif hours_left == 0:
                    await message.reply(f'üòê –Ü–≤–µ–Ω—Ç –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ {minutes_left} —Ö–≤–∏–ª–∏–Ω.')
                else:
                    await message.reply(f'üòê –Ü–≤–µ–Ω—Ç –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ {hours_left} –≥–æ–¥–∏–Ω {minutes_left} —Ö–≤–∏–ª–∏–Ω.')
            else:
                randSleep = random.randint(15,30)
                await db.update_dateEvent(now, numberID_event)
                await message.reply('–Ü–≤–µ–Ω—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π!\n–ü–æ—á–∞–≤—Å—è –ø–æ—à—É–∫ –∫–æ–Ω–≤–µ—Ä—Ç—É... –û—á—ñ–∫—É–π—Ç–µ')
                await asyncio.sleep(randSleep)
                await message.reply(f'–ü—Ä–∏–π—à–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç.\n –î–ª—è —Ç–æ–≥–æ —â–æ–± –∑–∞–±—Ä–∞—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É - /claim.')
                takeIsActive = await db.takeIsActive(numberID_event)
                newActive = 1
                await db.updateIsActive(newActive, numberID_event)


@router.message(Command('claim'))
async def claim_chest(message: types.Message):
    check_user = await db.select_username(message)
    if not check_user:
        await message.reply("üòø –ö–æ—Ç–∏–∫, —Ç–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /reg")
    else:
        numberID_event = 1
        takeIsActive = await db.takeIsActive(numberID_event)
        if takeIsActive == 1:
            prizeSize = random.randint(1,3)
            sizeUser = await db.select_size(message)
            for ns in sizeUser:
                newsize = prizeSize + ns
                await db.update_size(newsize, message.from_user.id)
                await message.reply(f'–¢–∏ –≤—ñ–¥–∫—Ä–∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç —ñ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–æ–¥–∞—Ä—É–Ω–æ–∫ —É –≤–∏–≥–ª—è–¥—ñ +{prizeSize}.\n –¢–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä {newsize}.')
                newActive = 0
                await db.updateIsActive(newActive, numberID_event)
        else:
            await message.reply('–ö–æ–Ω–≤–µ—Ä—Ç –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π, –æ—á—ñ–∫—É–π –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —ñ–≤–µ–Ω—Ç—É.')
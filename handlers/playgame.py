# version 1.1-0
from aiogram import Bot, Dispatcher, Router, types, F, html
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Filter
import random
from aiogram import Bot, Dispatcher, types, F
from handlers import database as db
import datetime

HELP_TEXT = """
–£–º–æ–≤–∏ –≥—Ä–∏ '–†–æ–∑–º—ñ—Ä —á–ª–µ–Ω—É'.
–í–∏ –º–æ–∂–µ—Ç–µ –∑–±—ñ–ª—å—à–∏—Ç–∏ –∞–±–æ –∑–º–µ–Ω—à–∏—Ç–∏ —Å–≤—ñ–π —Ä–æ–∑–º—ñ—Ä —á–ª–µ–Ω—É –≤—ñ–¥ -10 –¥–æ +10 —Å–º –≤ –¥–µ–Ω—å.

/size - –î—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–≤—ñ–π —Ä–æ–∑–º—ñ—Ä —á–ª–µ–Ω—É.
/play - –í–∏–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å–≤–æ—é —É–¥–∞—á—É –Ω–∞ –¥–µ–Ω—å —Ç–∞ –¥—ñ–∑–Ω–∞–π—Ç–µ—Å—è —Ç–µ–ø–µ—Ä—ñ—à–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä –≤–∞—à–æ–≥–æ —á–ª–µ–Ω—É.
"""

router = Router()

@router.message(F.text == '/start')
async def cmd_start_and_help(message: types.Message):
    #–í—ã—Ç—è–≥–∏–≤–∞–µ–º id –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–¥
    chat_id = message.chat.id
    user_name = message.from_user.full_name
    print(user_name)
    await db.cmd_start_db(message.from_user.id, chat_id, user_name)
    await message.answer(HELP_TEXT)


@router.message(F.text == '/help')
async def cmd_start_and_help(message: types.Message):
    await message.answer(HELP_TEXT)

@router.message(F.text == '/play')
async def cmd_up(message: types.Message):
    date = datetime.datetime.now()
    date = int(date.strftime('%Y%m%d'))
    dateuser = db.cur.execute("SELECT date FROM accounts WHERE tg_id == {key}".format(key=message.from_user.id)).fetchone()
    for lit in dateuser:
        if lit == 1 or lit != date:
            usersize = db.cur.execute("SELECT size FROM accounts WHERE tg_id == {key}".format(key=message.from_user.id)).fetchone()
            for user in usersize:
                math = random.randint(-5,10)
                user = user + math
                db.cur.execute('UPDATE accounts SET size = {size} WHERE tg_id == {key}'.format(size=user, key=message.from_user.id)).fetchone()
                db.cur.execute("UPDATE accounts SET date = {datetime} WHERE tg_id == {key}".format(datetime=date,key=message.from_user.id)).fetchone()
                db.db.commit()
                if math > 0:
                    await message.answer(f'>>> üòª –ß–ª–µ–Ω –∑–±—ñ–ª—å—à–∏–≤—Å—è –Ω–∞: {math} —Å–º. –í–∞—à —Ç–µ–ø–µ—Ä—ñ—à–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä: {user}')
                else:
                    await message.answer(f'>>> ü§è –ß–ª–µ–Ω –∑–º–µ–Ω—à–∏–≤—Å—è –Ω–∞: {math} —Å–º. –í–∞—à —Ç–µ–ø–µ—Ä—ñ—à–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä: {user}')
        elif lit == date:
            await message.answer('üôÅ –°—å–æ–≥–æ–¥–Ω—ñ –≤–∏ –≤–∂–µ –∑—ñ–≥—Ä–∞–ª–∏. –ü–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ üôÇ')
        elif lit == 1:
            db.cur.execute("UPDATE accounts SET date = {datetime} WHERE tg_id == {key}".format(datetime=date,key=message.from_user.id)).fetchone()
            db.db.commit()

@router.message(F.text == '/size')
async def cmd_size(message: types.Message):
    size = db.cur.execute('SELECT size FROM accounts WHERE tg_id == {key}'.format(key=message.from_user.id)).fetchone()
    db.db.commit()
    for rowed in size:
        await message.answer(f">>> –í–∞—à —Ä–æ–∑–º—ñ—Ä —á–ª–µ–Ω—É: {rowed} —Å–º")\

@router.message(F.text == '/leaders')
async def cmd_getleaders(message: types.Message):
    chat_id_session = message.chat.id
    chatid_db = db.cur.execute('SELECT chatID FROM accounts WHERE tg_id == {key}'.format(key=message.from_user.id)).fetchone()
    print(f"–¢–µ–∫—É—â–∏–π –∞–π–¥–∏: {chat_id_session} –ê–π–¥–∏ —Å –±–¥: {chatid_db}")
    for row in chatid_db:
        if chat_id_session != row:
            print("–≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            db.cur.execute("UPDATE accounts SET chatID = {chat} WHERE tg_id == {key}".format(chat=chat_id_session,key=message.from_user.id)).fetchone()
        elif chat_id_session == row:
            allmembers = db.cur.execute('SELECT tg_id FROM accounts WHERE chatID == {key}'.format(key=chat_id_session)).fetchall()
            print(allmembers)
    db.db.commit()